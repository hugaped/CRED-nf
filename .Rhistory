ui <- fluidPage(
titlePanel(h2("CRED-nf Checklist")),
navlistPanel(
"Domains",
tabPanel("About",
tags$div(HTML("<h1><u>C</u>onsensus on the <u>r</u>eporting and <u>e</u>xperimental <u>d</u>esign of clinical and cognitive-beharioural <u>n</u>euro<u>f</u>eedback studies (CRED-nf checklist)</h1>")),
tags$div(p("This webpage serves as an online tool to standardize reporting of the",
a(href="https://psyarxiv.com/nyx84/", "CRED-nf checklist."),
"Please select the tabs on the left and answer the questions provided. When you respond ‘Yes’ to an item, you will be prompted to copy-paste the text from your manuscript that addresses the item. We recommend you also save this copy-pasted text in a text document in case this webpage has a timeout issue.", style = "font-size:15px")),
br(),
p("When completed, click the ‘Download summary’ button from the ‘Checklist summary’ tab. This will produce a table which you can include in your manuscript submission as supplementary material.", style = "font-size:15px"),
br(),
tags$div(p("For full details about this checklist, the criteria regarding each item, and the motivation for its development, please see",
a(href="https://psyarxiv.com/nyx84/", "the associated manuscript here."), style = "font-size:15px")),
br(),
tags$div(p("This tool is currently a Beta version, and has been created by Hugo Pedder and Robert Thibault of the University of Bristol. The content is taken from the published version of the CRED-nf checklist. If you encounter any bugs when using it or have any feedback, please email robert.thibault@bristol.ac.uk with the subject `CRED-nf Shiny App` or raise an issue on",
a(href="https://www.github.com/hugaped/CRED-nf", "GitHub"), style = "font-size:15px"))
),
tabPanel("Manuscript information",
textInput("title", label="Manuscript title", width="80%"),
textInput("author", label="Corresponding author name", width="80%"),
textInput("email", label="Corresponding author email", width="80%")),
tabPanel("1. Pre-experiment",
h2("Pre-Experiment"),
lapply(1:2, function(i) {
wellPanel(
selectInput(inputIDs[i], h4(),
choices = as.list(choicelist[[choicecode[i]]]), selected = NULL),
uiOutput(newIDs[i]),
textOutput(textIDs[i])
)
})
),
tabPanel("2. Control groups",
h2("Control groups"),
lapply(3:8, function(i) {
wellPanel(
selectInput(inputIDs[i], h4(),
choices = as.list(choicelist[[choicecode[i]]]), selected = NULL),
uiOutput(newIDs[i]),
textOutput(textIDs[i])
)
})
),
tabPanel("3. Control measures",
h2("Control measures"),
lapply(9:13, function(i) {
wellPanel(
selectInput(inputIDs[i], h4(),
choices = as.list(choicelist[[choicecode[i]]]), selected = NULL),
uiOutput(newIDs[i]),
textOutput(textIDs[i])
)
})
),
tabPanel("4. Feedback specifications",
h2("Feedback specifications"),
lapply(14:18, function(i) {
wellPanel(
selectInput(inputIDs[i], h4(),
choices = as.list(choicelist[[choicecode[i]]]), selected = NULL),
uiOutput(newIDs[i]),
textOutput(textIDs[i])
)
})
),
tabPanel("5. Outcome measures - Brain",
h2("Outcome measures - Brain"),
lapply(19:21, function(i) {
wellPanel(
selectInput(inputIDs[i], h4(),
choices = as.list(choicelist[[choicecode[i]]]), selected = NULL),
uiOutput(newIDs[i]),
textOutput(textIDs[i])
)
})
),
tabPanel("6. Outcome measures - Behaviour",
h2("Outcome measures - Behaviour"),
lapply(22:23, function(i) {
wellPanel(
selectInput(inputIDs[i], h4(),
choices = as.list(choicelist[[choicecode[i]]]), selected = NULL),
uiOutput(newIDs[i]),
textOutput(textIDs[i])
)
})
),
tabPanel("7. Data storage",
h2("Data storage"),
lapply(24, function(i) {
wellPanel(
selectInput(inputIDs[i], h4(),
choices = as.list(choicelist[[choicecode[i]]]), selected = NULL),
uiOutput(newIDs[i]),
textOutput(textIDs[i])
)
})
),
tabPanel("Checklist summary",
tags$span(style="color:red",
strong(em(textOutput("warningtext")))
),
h2("CRED-nf checklist summary output"),
tags$div(
tags$ol(
tags$li("Pre-experiment"),
tags$ol(
lapply(1:2, function(i) {
tags$li(textOutput(summaryIDs[i]))
}),
type="a"
),
tags$li("Control groups"),
tags$ol(
lapply(3:4, function(i) {
tags$li(textOutput(summaryIDs[i]))
}),
tags$li("Blinding of those who rate the outcome and those who analyse the data:",
tags$ul(
tags$li(textOutput(summaryIDs[5])),
tags$li(textOutput(summaryIDs[6]))
)
),
lapply(7:8, function(i) {
tags$li(textOutput(summaryIDs[i]))
}),
type="a"
),
tags$li("Control measures"),
tags$ol(
lapply(9:13, function(i) {
tags$li(textOutput(summaryIDs[i]))
}),
type="a"
),
tags$li("Feedback specifications"),
tags$ol(
lapply(14:18, function(i) {
tags$li(textOutput(summaryIDs[i]))
}),
type="a"
),
tags$li("Outcome measures - Brain"),
tags$ol(
lapply(19:21, function(i) {
tags$li(textOutput(summaryIDs[i]))
}),
type="a"
),
tags$li("Outcome measures - Behaviour"),
tags$ol(
lapply(22:23, function(i) {
tags$li(textOutput(summaryIDs[i]))
}),
type="a"
),
tags$li("Data storage"),
tags$ol(
lapply(24, function(i) {
tags$li(textOutput(summaryIDs[i]))
}),
type="a"
)
)
),
br(), br(),
downloadButton("reportpdf", "Download summary")
),
widths=c(3,9)
)
)
########################## START SERVER #############################
server <- function(input, output, session) {
############ Observe inputs to react to selections made by user ############
observe({
for (i in 1:ncheck) {
updateSelectInput(session, inputId = inputIDs[i], label = labels[i],
choices = choicelist[[choicecode[i]]])
}
})
############ Add text boxes for manuscript info, etc #########
assign("title", renderText({input$title}))
assign("author", renderText({input$author}))
assign("email", renderText({input$email}))
############ Add open end box to enter text if they user has selected "yes" ############
lapply(1:ncheck, function(i) {
output[[newIDs[i]]] <- renderUI({
if (!input[[inputIDs[i]]] %in% c("Yes",
"Yes, and the measure was defined a priori",
"Yes, and the measure was not defined a priori",
"Yes, and a double-blind was used",
"Yes, and a standard-of-care intervention group was used as a benchmark for improvement",
"Partially")) {
return(NULL)
} else {
textAreaInput(responseIDs[i], label=responseIDs[i], placeholder=placeholders[[i]])
}
})
})
########### Return text ############
lapply(1:ncheck, function(i) {
output[[paste0("text", checkIDs[i])]] <- renderText({
if (input[[inputIDs[i]]] %in% c("Yes", "Yes, and the measure was defined a priori", "Yes, and the measure was not defined a priori")) {
return(input[[responseIDs[i]]])
}
})
})
############# Generate report summary #############
params <- list()
lapply(1:ncheck, function(i) {
assign(sumIDs[i],
reactive({
if (input[[inputIDs[i]]] %in% c("Yes",
"Yes, and the measure was defined a priori",
"Yes, and a double-blind was used",
"Yes, and a standard-of-care intervention group was used as a benchmark for improvement",
"Partially")) {
if (input[[responseIDs[i]]]=="") {
return(strblank)
} else {
return(input[[responseIDs[i]]])
}
} else if (input[[inputIDs[i]]] == "No") {
return(noboilers[i])
} else if (input[[inputIDs[i]]] %in% c("Not applicable",
"Not applicable, the study does not take cognitive or behavioural measures",
"Not applicable, there was only one participant group")) {
return(naboilers[i])
} else if (input[[inputIDs[i]]] == "Yes, and the measure was not defined a priori") {
temp <- input[[responseIDs[i]]]
if (temp=="") {
temp <- strblank
}
# Remove leading/trailing whitespace and add period if not at end
temp <- trimws(temp)
if (!grepl(".+\\.$", temp)) {
temp <- paste0(temp, ".")
}
return(paste(temp, "This clinical or behavioural significance value was not defined a priori.", sep=" "))
} else if (input[[inputIDs[i]]] %in% c("Yes, but a double-blind was not used",
"Yes, and a standard-of-care intervention group was not used as a benchmark for improvement")) {
return(naboilers[i])
}
}),
envir=globalenv()
)
output[[summaryIDs[i]]] <- renderText({eval(parse(text=paste0(sumIDs[i], "()")))})
})
########## Add warning text for items left blank ##########
warningtext <- reactive({
blankindex <- vector()
for (i in 1:ncheck) {
if (input[[inputIDs[i]]] %in% c("Yes", "Yes, and the measure was defined a priori", "Yes, and the measure was not defined a priori")) {
if (input[[responseIDs[i]]]=="") {
blankindex <- append(blankindex, i)
}
}
}
if (length(blankindex)>0) {
return(paste0("Warning: Checklist item(s) ", paste(checkIDs[blankindex], collapse=", "),
" have been left blank."))
} else {return(NULL)}
})
output$warningtext <- renderText(warningtext())
########## Add option to export to PDF and/or Docx ##########
output$reportpdf <- downloadHandler(
filename = "checklist.pdf",
content = function(file) {
# Copy report file to temp directory before processing it to avoid permission issues
tempReport <- file.path(tempdir(), "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list("title"=title(), "author"=author(), "email"=email(),
"domain1"=c(sum1a(), sum1b()),
"domain2"=c(sum2a(), sum2b(), sum2c.rater(), sum2c.stat(), sum2d(), sum2e()),
"domain3"=c(sum3a(), sum3b(), sum3c(), sum3d(), sum3e()),
"domain4"=c(sum4a(), sum4b(), sum4c(), sum4d(), sum4e()),
"domain5"=c(sum5a(), sum5b(), sum5c()),
"domain6"=c(sum6a(), sum6b()),
"domain7"=c(sum7a()),
"boilers"=c(noboilers, naboilers, strblank)
)
# Knit the document using params
rmarkdown::render(tempReport, output_file = file,
params=params,
envir=new.env(parent = globalenv()) # Eval in child of global env to isolate Rmd code from app code
)
}
)
}
shinyApp(ui, server)
app <- ShinyDriver$new("CREDnf")
app$snapshotInit("mytest")
app$setInputs(title = "This is the title")
app$setInputs(author = "Hugo Pedder")
app$setInputs(email = "hugopedder@gmail.com")
app$setInputs(checklist1a = "Yes")
app$setInputs(checklist1b = "Yes")
app$setInputs(response1a = "The analysis was preregistered at: URL")
app$s
?textAreaInput
app <- ShinyDriver$new("CREDnf")
app$snapshotInit("mytest")
app$setInputs(title = "This is the title")
app$setInputs(author = "Hugo Pedder")
app$setInputs(email = "hugopedder@gmail.com")
app$setInputs(checklist1a = "Yes")
app$setInputs(checklist1b = "Yes")
app$setInputs(response1a = "The analysis was preregistered at: URL")
app <- ShinyDriver$new("CREDnf")
app$snapshotInit("mytest")
app$setInputs(title = "This is the title")
app$setInputs(author = "Hugo Pedder")
app$setInputs(email = "hugopedder@gmail.com")
app$setInputs(checklist1a = "Yes")
app$setInputs(checklist1b = "Yes")
app$setInputs(response1a = "The analysis was preregistered at: URL")
app <- ShinyDriver$new("CREDnf")
app$snapshotInit("mytest")
app$setInputs(title = "This is the title")
app$setInputs(author = "Hugo Pedder")
app$setInputs(email = "hugopedder@gmail.com")
app$setInputs(checklist1a = "Yes")
app$setInputs(checklist1b = "Yes")
app$setInputs(response1a = "The analysis was preregistered at: URL")
app <- ShinyDriver$new("CREDnf")
app$snapshotInit("mytest")
app$setInputs(title = "This is the title")
app$setInputs(author = "Hugo Pedder")
app$setInputs(email = "hugopedder@gmail.com")
app$setInputs(checklist1a = "Yes")
app$setInputs(checklist1b = "Yes")
app$setInputs(response1a = "The analysis was preregistered at: URL")
app <- ShinyDriver$new("CREDnf")
app$snapshotInit("mytest")
app$setInputs(title = "This is the title")
app$setInputs(author = "Hugo Pedder")
app$setInputs(email = "hugopedder@gmail.com")
app$setInputs(checklist1a = "Yes")
app$setInputs(checklist1b = "Yes")
app$setInputs(responseIDs[1] = "The analysis was preregistered at: URL")
app$snapshot()
responseIDs
responseIDs[1]
app <- ShinyDriver$new("CREDnf")
app$snapshotInit("mytest")
app$setInputs(title = "This is the title")
app$setInputs(author = "Hugo Pedder")
app$setInputs(email = "hugopedder@gmail.com")
app$setInputs(checklist1a = "Yes")
app$setInputs(checklist1b = "Yes")
app$setInputs(assign(responseIDs[1], "The analysis was preregistered at: URL"))
app$snapshot()
app <- ShinyDriver$new("CREDnf")
app$snapshotInit("mytest")
app$setInputs(title = "This is the title")
app$setInputs(author = "Hugo Pedder")
app$setInputs(email = "hugopedder@gmail.com")
app$setInputs(checklist1a = "Yes")
app$setInputs(checklist1b = "Yes")
app$setInputs(responseIDs[1], "The analysis was preregistered at: URL")
app$snapshot()
app <- ShinyDriver$new("CREDnf")
app$snapshotInit("mytest")
app$setInputs(title = "This is the title")
app$setInputs(author = "Hugo Pedder")
app$setInputs(email = "hugopedder@gmail.com")
app$setInputs(checklist1a = "Yes")
app$setInputs(checklist1b = "Yes")
app$setInputs(responseIDs[i], "The analysis was preregistered at: URL")
app$snapshot()
app <- ShinyDriver$new("CREDnf")
app$snapshotInit("mytest")
app$setInputs(title = "This is the title")
app$setInputs(author = "Hugo Pedder")
app$setInputs(email = "hugopedder@gmail.com")
app$setInputs(checklist1a = "Yes")
app$setInputs(checklist1b = "Yes")
app$setInputs(response1a, "The analysis was preregistered at: URL")
app$snapshot()
app <- ShinyDriver$new("CREDnf")
app$snapshotInit("mytest")
app$setInputs(title = "This is the title")
app$setInputs(author = "Hugo Pedder")
app$setInputs(email = "hugopedder@gmail.com")
app$setInputs(checklist1a = "Yes")
app$setInputs(checklist1b = "Yes")
app$setInputs(response1a = "The analysis was preregistered at: URL")
app$snapshot()
app <- ShinyDriver$new("CREDnf")
app$snapshotInit("mytest")
app$setInputs(title = "This is the title")
app$setInputs(author = "Hugo Pedder")
app$setInputs(email = "hugopedder@gmail.com")
app$setInputs(checklist1a = "Yes")
app$setInputs(checklist1b = "Yes")
app$setInputs(response1a = "The analysis was preregistered at: URL", allowInputNoBinding_ = TRUE)
app$snapshot()
shinytest::recordTest("~/UKRN/CREDnf/CREDnf")
shinytest::recordTest("~/UKRN/CREDnf/CREDnf")
shinytest::recordTest("~/UKRN/CREDnf/CREDnf")
shinytest::recordTest("~/UKRN/CREDnf/CREDnf")
app <- ShinyDriver$new("CREDnf")
app$snapshotInit("SummaryReport")
app$setInputs(checklist4a = "Yes")
app$setInputs(response4a = "Adding info to checklist item 4a to remove warning", allowInputNoBinding_ = TRUE)
app$snapshot()
app$snapshotDownload("reportpdf")
app$snapshot()
app <- ShinyDriver$new("CREDnf")
app$snapshotInit("Domain1-3")
app$setInputs(title = "Test Manuscript")
app$setInputs(author = "Ronald Macdonald")
app$setInputs(email = "rmaccyd@macdonalds.com")
app$snapshot()
app$setInputs(checklist1b = "Yes")
app$setInputs(response1b = "This is my sampling plan and sample size", allowInputNoBinding_ = TRUE)
app$setInputs(checklist1a = "Yes")
app$setInputs(checklist1a = "No")
app$setInputs(checklist1a = "Yes")
app$setInputs(response1a = "I want to delete this later", allowInputNoBinding_ = TRUE)
app$snapshot()
app$setInputs(checklist2b = "Yes, but a double-blind was not used")
app$setInputs(`checklist2c.rater` = "Not applicable, there was only one participant group")
app$setInputs(`checklist2c.stat` = "Not applicable, there was only one participant group")
app$setInputs(checklist2d = "Yes")
app$setInputs(response2d = "Many measures were taken", allowInputNoBinding_ = TRUE)
app$setInputs(checklist2e = "Yes, and a standard-of-care intervention group was not used as a benchmark for improvement")
app$snapshot()
app$setInputs(checklist3a = "Yes")
app$setInputs(response3a = "Psychosocial data were collected", allowInputNoBinding_ = TRUE)
app$setInputs(checklist3c = "Yes")
app$setInputs(response3c = "We used very complex strategies for participants", allowInputNoBinding_ = TRUE)
app$setInputs(checklist3e = "Yes")
app$setInputs(checklist3e = "No")
app$snapshot()
app <- ShinyDriver$new("CREDnf")
app$snapshotInit("Domain4-7")
app$setInputs(title = "Manuscript for testing")
app$setInputs(author = "Harry Potter")
app$setInputs(email = "hpotter@hogwarts.co.uk")
app$setInputs(checklist4b = "Yes")
app$setInputs(response4b = "We used a thorough and justified reinforcement schedule", allowInputNoBinding_ = TRUE)
app$setInputs(checklist4d = "Yes")
app$setInputs(response4d = "Lots of brain activity variables like blood flow and neuronal activity", allowInputNoBinding_ = TRUE)
app$setInputs(checklist4e = "Yes")
app$setInputs(response4e = "We used the CRED-nf checklist for reporting our study", allowInputNoBinding_ = TRUE)
app$setInputs(checklist5b = "Partially")
app$setInputs(response5b = "This is only a partial explanation", allowInputNoBinding_ = TRUE)
app$setInputs(checklist5c = "Not applicable, there was only one participant group")
app$setInputs(checklist6a = "Not applicable, the study does not take cognitive or behavioural measures")
app$setInputs(checklist6b = "Yes")
app$setInputs(response6b = "We compared regulation success thoroughly", allowInputNoBinding_ = TRUE)
app$setInputs(checklist7a = "Yes")
app$setInputs(response7a = "All material are open access because it's the best", allowInputNoBinding_ = TRUE)
app$snapshot()
library(shinytest)
source("Domain1-3.R")
getwd()
library(shinytest)
source("CREDnf/test/Domain1-3.R")
library(shinytest)
source("CREDnf/tests/Domain1-3.R")
source("CREDnf/tests/Domain4-7.R")
app <- ShinyDriver$new("CREDnf")
app$snapshotInit("SummaryReport")
app$setInputs(checklist4a = "Yes")
app$setInputs(response4a = "Adding info to checklist item 4a to remove warning", allowInputNoBinding_ = TRUE)
app$snapshot()
app$snapshotDownload("reportpdf")
app$snapshot()
app <- ShinyDriver$new("CREDnf")
app$snapshotInit("SummaryReport")
app$setInputs(checklist4a = "Yes")
app$setInputs(response4a = "Adding info to checklist item 4a to remove warning", allowInputNoBinding_ = TRUE)
app$snapshot()
app$snapshotDownload("reportpdf", filename = "report.pdf")
app$snapshot()
app <- ShinyDriver$new("CREDnf")
app$snapshotInit("SummaryReport")
app$setInputs(checklist4a = "Yes")
app$setInputs(response4a = "Adding info to checklist item 4a to remove warning", allowInputNoBinding_ = TRUE)
app$snapshot()
app$snapshotDownload("reportpdf", filename = "checklist.pdf")
app$snapshot()
runApp('CREDnf')
runApp('CREDnf')
shinytest::recordTest("~/UKRN/CREDnf/CREDnf")
app <- ShinyDriver$new("../")
app$snapshotInit("mytest")
app$snapshotDownload("reportpdf")
library(shinytest)
source("CREDnf/tests/Domain1-3.R")
source("CREDnf/tests/Domain4-7.R")
?render
rmarkdown::render("report.Rmd", params=list(title="TEST"))
rmarkdown::render("..report.Rmd", params=list(title="TEST"))
rmarkdown::render("../report.Rmd", params=list(title="TEST"))
setwd("..")
rmarkdown::render("report.Rmd", params=list(title="TEST"))
getwd()
setwd("../CREDnf")
rmarkdown::render("report.Rmd", params=list(title="TEST"))
setwd("../CREDnf/CREDnf")
rmarkdown::render("report.Rmd", params=list(title="TEST"))
getwd()
setwd("./CREDnf/CREDnf")
rmarkdown::render("report.Rmd", params=list(title="TEST"))
setwd("./CREDnf/CREDnf")
rmarkdown::render("report.Rmd", params=list(title="TEST"))
runApp()
